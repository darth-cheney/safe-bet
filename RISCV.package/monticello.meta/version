(name 'RISCV-EG.45' message 'Implementing JALR special jump instruction. This is a specialized I-type, and has required some hacky workarounds to get the opcode/funct3 values to correctly parse from an incoming integer.  It seems that the widely used I-type does not fit nicely as an OOP superclass. But we seem to have a working version of this overall structure, no matter the hackiness.' id 'e010f4b9-17d4-4083-82ee-bceebf7fe84b' date '13 June 2020' time '2:51:59.280955 pm' author 'EG' ancestors ((name 'RISCV-EG.44' message 'Implemeting BEQ, with all current tests' id '241cd17b-3334-4ca1-93f6-0fb554eb4e7c' date '13 June 2020' time '2:15:22.852739 pm' author 'EG' ancestors ((name 'RISCV-EG.43' message 'Implementing BNE instruction, with all current tests' id '296bc36f-54c8-40e0-b239-b9009853d08f' date '13 June 2020' time '2:05:33.816055 pm' author 'EG' ancestors ((name 'RISCV-EG.42' message 'Implementing BLT, with all current tests' id '22639a0c-89f8-4c40-ad94-d992f8853af0' date '13 June 2020' time '1:52:45.762635 pm' author 'EG' ancestors ((name 'RISCV-EG.41' message 'Implementing BGE instruction, with all current tests' id '1fe7428b-11ff-4871-8571-eecca2bfcd55' date '13 June 2020' time '1:39:56.518719 pm' author 'EG' ancestors ((name 'RISCV-EG.40' message 'Implementing BLTU instruction, with current tests' id '495cd1ea-c664-4966-8190-065219284cfa' date '13 June 2020' time '1:25:36.781249 pm' author 'EG' ancestors ((name 'RISCV-EG.39' message 'Implementing RV32IBBGEU, with all current tests' id '1a8a8b46-509f-45d2-883f-8ef1cde324a0' date '13 June 2020' time '1:06:52.591027 pm' author 'EG' ancestors ((name 'RISCV-EG.38' message 'Adding RV32IB base superclass for all B-type (branch) instructions. I have done an initial pass of the parts configuration.  Note that the configuration (order and indices) of the immediate parts is complex, and warrants its own test case' id 'ca1a4fa3-9746-4545-8435-c227661324f0' date '31 May 2020' time '7:03:35.337363 pm' author 'EG' ancestors ((name 'RISCV-EG.37' message 'Adding RV32IILB (LB) instruction, with all current tests' id '68b37f45-7146-4811-8890-2fc96e75848c' date '31 May 2020' time '6:31:58.713102 pm' author 'EG' ancestors ((name 'RISCV-EG.36' message 'Adding RV32IILH (LH) instruction, with all current tests' id '2f7e0fbe-e97e-43e9-8005-461d1da4032a' date '31 May 2020' time '6:23:35.803329 pm' author 'EG' ancestors ((name 'RISCV-EG.35' message 'Adding  RV32IILW (LW) instruction, with all current tests' id 'af24492c-f5a2-4805-b2e3-3cdda92e47a9' date '31 May 2020' time '6:14:26.839616 pm' author 'EG' ancestors ((name 'RISCV-EG.34' message 'Adding RV32IILBU (LBU) instruction, with all current tests' id '607a6bf3-9bb7-431c-af18-21cd3048478b' date '31 May 2020' time '6:06:07.634734 pm' author 'EG' ancestors ((name 'RISCV-EG.33' message 'Adding RV32IILHU instruction with all current tests.  Note that due to the separate opcode, we had to add an intervening class into the hierarchy called RV32IIL. These will only be used with I-type Load instructions' id 'f025f08c-f2cd-4586-9d35-71aa0f7e77d5' date '31 May 2020' time '5:56:18.300983 pm' author 'EG' ancestors ((name 'RISCV-EG.32' message 'Adding RV32ISSB (SB) instruction, with all current tests' id '4e27e706-40c7-4951-baea-700d12c7d85f' date '31 May 2020' time '5:25:24.600008 pm' author 'EG' ancestors ((name 'RISCV-EG.31' message 'Adding RV32ISSH (SH) instruction, with all current tests' id '98c39030-a128-41e5-8ece-5973e5ade27d' date '31 May 2020' time '5:13:14.511102 pm' author 'EG' ancestors ((name 'RISCV-EG.30' message 'Updaing RV32ISSW class comment to explain how the store happens' id '1938bcfe-8e28-4a07-8be4-712e7a02900a' date '27 May 2020' time '11:26:53.970215 am' author 'EG' ancestors ((name 'RISCV-EG.29' message 'Adding RV32IS abstract class and RV32ISSW instruction, with all current tests' id 'd26dd476-25a0-4a44-9655-0fb76fe19834' date '27 May 2020' time '11:19:42.190042 am' author 'EG' ancestors ((name 'RISCV-EG.28' message 'Adding the ADDI instruction, with all current tests.' id '26883fe2-7a74-4e31-a7b0-c56562eb61db' date '27 May 2020' time '10:28:29.635137 am' author 'EG' ancestors ((name 'RISCV-EG.27' message 'Adding SLTI instruciton with all current tests' id 'b87f55ae-5e52-4945-98ff-f7ea4c2036b7' date '27 May 2020' time '10:16:49.505349 am' author 'EG' ancestors ((name 'RISCV-EG.26' message 'Adding RV32IISLTIU instruction with all current tests.Note that we found a bug and needed to modify the RV32II class >> #fromIntegerWithoutOpcode: method to account for "specialized" I-types and checking the toggleBit' id '5e7c306b-d8fa-4a17-a094-c8de3ad8e8c5' date '27 May 2020' time '9:59:55.269058 am' author 'EG' ancestors ((name 'RISCV-EG.25' message 'Adding XORI instruction with all current tests' id 'd8144875-6884-4a90-ba40-876e42a1aff7' date '27 May 2020' time '9:34:23.46817 am' author 'EG' ancestors ((name 'RISCV-EG.24' message 'Adding ORI and all current tests. Also updating class comments for both ANDI and ORI' id '77870a2e-4ad2-4596-b5f5-49beb7c09be5' date '25 May 2020' time '5:34:02.794169 pm' author 'EG' ancestors ((name 'RISCV-EG.23' message 'Adding ADDI instruction, with all current tests' id '0e8a93ae-c5b1-4a87-9c3b-acce23828334' date '25 May 2020' time '5:16:06.664142 pm' author 'EG' ancestors ((name 'RISCV-EG.22' message 'Adding RV32IISLLI instruction, along with all current tests.Note that this completes the initial implementation of the specialized I-type classes (shifts), but not the general I-types.' id 'ac755502-982f-4c28-b669-8aabb8c507a8' date '25 May 2020' time '3:02:53.904492 pm' author 'EG' ancestors ((name 'RISCV-EG.21' message 'Adding RV32IISRLI instruction with all current tests' id 'd8521237-fcee-42f6-aa13-3dda59108980' date '25 May 2020' time '2:47:15.251691 pm' author 'EG' ancestors ((name 'RISCV-EG.20' message 'Adding #fromIntegerWithoutOpcode: to RV32II instruction classes.  Also finishing test implementations for RV32IISRAI' id '4ee354d6-9f2d-4965-aee9-ee4604b28bb3' date '25 May 2020' time '2:26:39.163775 pm' author 'EG' ancestors ((name 'RISCV-EG.19' message 'Adding override #immediateValue: to RV32IISRAI and adding a test for it.Still need to att the testFromInteger for RV32IISRAI' id 'fcedff0c-f6c8-49b6-882f-343eedcda77f' date '22 May 2020' time '5:51:45.232815 pm' author 'EG' ancestors ((name 'RISCV-EG.18' message 'Updating processing of immediates in an instruction.We can now set an overall immediate value for an instruction and it will be distributed correctly across the potentially out of order immediate parts. Adding test for this case' id '19bbec19-85d5-4e50-92ce-bd869af13557' date '22 May 2020' time '5:38:49.507857 pm' author 'EG' ancestors ((name 'RISCV-EG.17' message 'Adding base class RV32II for I-type instructions' id '85203192-8073-4c86-a791-c9ac05752a42' date '22 May 2020' time '4:36:48.736063 pm' author 'EG' ancestors ((name 'RISCV-EG.16' message 'Minor cleanup of setting opcode writeable to false for R type instructions. We now do this in RV32IR >> #initializeParts rather than each subclass''s individual initialization method.' id 'fb273c14-90aa-423a-b8ac-444edaea41e8' date '22 May 2020' time '4:10:58.347756 pm' author 'EG' ancestors ((name 'RISCV-EG.15' message 'Adding SLTU instruction with current tests. Also cleaning up class comments where the bit descriptions were off' id '231f1a3a-7b41-499f-897c-154dc16d51e8' date '22 May 2020' time '4:04:14.543567 pm' author 'EG' ancestors ((name 'RISCV-EG.14' message 'Adding XOR instruction with all current tests' id 'b3a5119d-518b-4387-af43-c0dd9be8f210' date '22 May 2020' time '3:46:35.172033 pm' author 'EG' ancestors ((name 'RISCV-EG.13' message 'Adding SRA instruction with current tests' id '00b100c7-212f-4177-b162-25625af039bc' date '22 May 2020' time '3:33:27.410465 pm' author 'EG' ancestors ((name 'RISCV-EG.12' message 'Adding OR instruction with current tests' id '9a304d4e-7826-4132-bd33-7c6113761e3c' date '22 May 2020' time '3:19:04.492681 pm' author 'EG' ancestors ((name 'RISCV-EG.11' message 'Adding AND instruction, with current tests' id '41056ff9-dab0-43a7-939c-f24bd65149fa' date '22 May 2020' time '3:06:35.540127 pm' author 'EG' ancestors ((name 'RISCV-EG.10' message 'Adding SLL instruction, with current tests' id '5be0e18a-2cfd-4504-a7eb-98db931a0adf' date '22 May 2020' time '1:22:41.92299 pm' author 'EG' ancestors ((name 'RISCV-EG.9' message 'Adding testFromInteger integration tests for all current RV32IR subclasses that we have so far' id 'cb10fe25-9810-4709-9870-0d3dd0b0ac4b' date '22 May 2020' time '12:25:28.52239 pm' author 'EG' ancestors ((name 'RISCV-EG.8' message 'Fixing but in RV32IR class >> #fromIntegerWithoutOpcode: in which bitshifting wasn''t occurring and thus incorrect values for funt7 and funct3 were being parsed out from the incoming integer' id '65429e91-9bb1-45f0-bdc2-04b98381a339' date '22 May 2020' time '11:43:12.47571 am' author 'EG' ancestors ((name 'RISCV-EG.7' message 'Adding ability to parse correct instruction instances from incoming integers.  Also added ability to make RVInstructionParts non-writeable, specifically in instructions were they should not be overwritten (thiings like funct7, funct3, etc)' id '70539d83-bd79-4fb1-9281-064e600e134d' date '22 May 2020' time '10:17:46.371012 am' author 'EG' ancestors ((name 'RISCV-EG.6' message 'Adding SUB and SLL Instructions, with tests' id '5b6a8f43-0cce-4872-bd07-2c766f1e96f1' date '21 May 2020' time '6:30:49.670446 pm' author 'EG' ancestors ((name 'RISCV-EG.5' message 'Adding lenx and asInteger methods to RVInstruction' id '86757466-9e60-4947-b71c-ac501b45fea2' date '20 May 2020' time '7:57:59.447735 pm' author 'EG' ancestors ((name 'RISCV-EG.4' message 'Adding the 32ISRL instruction, with class comment description' id '68c5420b-8915-447e-b3cb-69215cd47299' date '20 May 2020' time '6:52:02.526488 pm' author 'EG' ancestors ((name 'RISCV-EG.3' message 'Adding ability for RVInstruction to compute a correct immediate value based on a collection of (out of order) RVImmediateParts' id 'e17b0271-08cc-4bd5-9d40-e21e7615fc19' date '20 May 2020' time '6:16:09.957637 pm' author 'EG' ancestors ((name 'RISCV-EG.2' message 'Adding full tests for RVInstructionPart and initial implementation of I32R abstract type' id 'c86c68b2-3f86-4f10-8362-b1f0fcb22078' date '20 May 2020' time '5:16:01.32064 pm' author 'EG' ancestors ((name 'RISCV-EG.1' message 'Initial monticello commit' id '77ee7e4e-621f-44aa-9c05-3a74bf2d69e1' date '20 May 2020' time '2:05:55.271605 pm' author 'EG' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())